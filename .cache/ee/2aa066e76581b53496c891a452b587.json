{"id":"XBTR","dependencies":[{"name":"/Users/ellenwang/Desktop/Ellen practice/Projects/Node projects/Projects/kimchi daddy/package.json","includedInParent":true,"mtime":1627058517687},{"name":"/Users/ellenwang/Desktop/Ellen practice/Projects/Node projects/Projects/kimchi daddy/node_modules/@babel/types/package.json","includedInParent":true,"mtime":1625695188564},{"name":"../validators/isNode","loc":{"line":8,"column":22},"parent":"/Users/ellenwang/Desktop/Ellen practice/Projects/Node projects/Projects/kimchi daddy/node_modules/@babel/types/lib/asserts/assertNode.js","resolved":"/Users/ellenwang/Desktop/Ellen practice/Projects/Node projects/Projects/kimchi daddy/node_modules/@babel/types/lib/validators/isNode.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=t;var e=require(\"../validators/isNode\");function t(t){if(!(0,e.default)(t)){var r,o=null!=(r=null==t?void 0:t.type)?r:JSON.stringify(t);throw new TypeError('Not a valid node of type \"'.concat(o,'\"'))}}"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"Object","original":{"line":3,"column":0},"generated":{"line":1,"column":13}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"defineProperty","original":{"line":3,"column":7},"generated":{"line":1,"column":20}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"exports","original":{"line":3,"column":22},"generated":{"line":1,"column":35}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","original":{"line":3,"column":31},"generated":{"line":1,"column":43}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","original":{"line":3,"column":45},"generated":{"line":1,"column":56}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"value","original":{"line":4,"column":2},"generated":{"line":1,"column":57}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","original":{"line":4,"column":9},"generated":{"line":1,"column":64}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"exports","original":{"line":6,"column":0},"generated":{"line":1,"column":68}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"default","original":{"line":6,"column":8},"generated":{"line":1,"column":76}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"assertNode","original":{"line":6,"column":18},"generated":{"line":1,"column":84}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","original":{"line":8,"column":0},"generated":{"line":1,"column":86}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"_isNode","original":{"line":8,"column":4},"generated":{"line":1,"column":90}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"require","original":{"line":8,"column":14},"generated":{"line":1,"column":92}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","original":{"line":8,"column":22},"generated":{"line":1,"column":100}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","original":{"line":10,"column":0},"generated":{"line":1,"column":124}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"assertNode","original":{"line":10,"column":9},"generated":{"line":1,"column":133}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"node","original":{"line":10,"column":20},"generated":{"line":1,"column":135}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","original":{"line":11,"column":6},"generated":{"line":1,"column":138}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","original":{"line":11,"column":7},"generated":{"line":1,"column":143}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"_isNode","original":{"line":11,"column":11},"generated":{"line":1,"column":145}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"default","original":{"line":11,"column":19},"generated":{"line":1,"column":147}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"node","original":{"line":11,"column":28},"generated":{"line":1,"column":156}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","original":{"line":11,"column":35},"generated":{"line":1,"column":159}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"_node$type","original":{"line":12,"column":8},"generated":{"line":1,"column":160}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"_node$type","original":{"line":12,"column":8},"generated":{"line":1,"column":164}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"type","original":{"line":14,"column":10},"generated":{"line":1,"column":166}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","original":{"line":14,"column":69},"generated":{"line":1,"column":168}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"_node$type","original":{"line":14,"column":18},"generated":{"line":1,"column":175}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","original":{"line":14,"column":39},"generated":{"line":1,"column":177}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"node","original":{"line":14,"column":31},"generated":{"line":1,"column":183}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","original":{"line":14,"column":46},"generated":{"line":1,"column":190}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"node","original":{"line":14,"column":55},"generated":{"line":1,"column":192}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"type","original":{"line":14,"column":60},"generated":{"line":1,"column":194}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"_node$type","original":{"line":14,"column":76},"generated":{"line":1,"column":200}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"JSON","original":{"line":14,"column":89},"generated":{"line":1,"column":202}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"stringify","original":{"line":14,"column":94},"generated":{"line":1,"column":207}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"node","original":{"line":14,"column":104},"generated":{"line":1,"column":217}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","original":{"line":15,"column":10},"generated":{"line":1,"column":220}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","original":{"line":15,"column":10},"generated":{"line":1,"column":226}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"TypeError","original":{"line":15,"column":14},"generated":{"line":1,"column":230}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"type","original":{"line":15,"column":53},"generated":{"line":1,"column":240}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"type","original":{"line":15,"column":53},"generated":{"line":1,"column":269}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","name":"type","original":{"line":15,"column":53},"generated":{"line":1,"column":276}},{"source":"../../node_modules/@babel/types/lib/asserts/assertNode.js","original":{"line":15,"column":4},"generated":{"line":1,"column":278}}],"sources":{"../../node_modules/@babel/types/lib/asserts/assertNode.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = assertNode;\n\nvar _isNode = require(\"../validators/isNode\");\n\nfunction assertNode(node) {\n  if (!(0, _isNode.default)(node)) {\n    var _node$type;\n\n    const type = (_node$type = node == null ? void 0 : node.type) != null ? _node$type : JSON.stringify(node);\n    throw new TypeError(`Not a valid node of type \"${type}\"`);\n  }\n}"},"lineCount":null}},"error":null,"hash":"9a76ea050f2dd64faaf9d38b89bb08f9","cacheData":{"env":{}}}